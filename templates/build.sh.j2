#!/usr/bin/env bash
# vim: ft=sh
set -e

function headIsDetached() {
    [[ $(git rev-parse --abbrev-ref --symbolic-full-name HEAD) == "HEAD" ]];
}

function binaryExists() {
    ls -l build/{{ beacon_node_build_targets | first }}_${COMMIT} 2>&1 1>/dev/null
}

function fetchChanges() {
    # We cannot use "git pull" in here, because history may be changed upstream
    git fetch
    git reset --hard "origin/${BRANCH}"
}

function buildBinaries() {
    # Control number of jobs used to lower impact on running nodes
    export MAKEFLAGS="-j{{ beacon_node_build_jobs | int }}"

    make update
    make {{ beacon_node_build_targets | join(" ") }} \
        LOG_LEVEL="TRACE" NIMFLAGS="-d:testnet_servers_image -d:noSignalHandler"

    # Rename binaries to match commit they were built from.
{% for target in beacon_node_build_targets %}
    mv "build/{{ target }}" "build/{{ target }}_${COMMIT}"

    # Create a symbolic link to the latest version
    ln -frs build/{{ target }}_${COMMIT} build/{{ target }}
{% endfor %}

    # Delete copies that are older than N days
    find build -mtime +{{ beacon_node_build_days_kept }} -exec rm '{}' \+
}

#-------------------------------------------------------------------------------

BRANCH="{{ beacon_node_repo_branch }}"
SERVICE="{{ beacon_node_service_name }}.service"

echo " >>> Build Start: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

if [[ "${USER}" != "{{ beacon_node_user }}" ]]; then
    echo "Incorrect user: ${USER}" >&2
    echo "Expected: {{ beacon_node_user }}" >&2
    exit 1
fi

# Build the Beacon node binaries
pushd repo >/dev/null

# Detached HEAD means we're probably on a tag
if headIsDetached; then
    echo " >>> Deatached HEAD, nothing to fetch."
else
    echo " >>> Fetching changes..."
    fetchChanges
fi

COMMIT=$(git rev-parse --short=8 HEAD)

if binaryExists && [[ "$1" != "--force" ]]; then
    echo " >>> Binary already built"
    exit 0
else
    echo " >>> Building binaries..."
    buildBinaries
fi

# Avoid faiure on first Ansible run due to missing service.
if [[ $(systemctl is-active "${SERVICE}" || true) == "inactive" ]]; then
    echo " !!! No service to restart!"
    exit
else
    echo " >>> Restarting service..."
    sudo systemctl restart "${SERVICE}"
fi

popd >/dev/null

echo " >>> SUCCESS"
